// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  userId             String    @db.ObjectId
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?   @db.String
  accessToken        String?   @db.String
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  role           Role           @default(STUDENT)
  name           String?
  email          String?        @unique @db.String
  emailVerified  DateTime?
  hashedPassword String?
  image          String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  accounts       Account[]
  sessions       Session[]
  BorrowedBook   BorrowedBook[]
}

enum Role {
  STUDENT
  ADMIN
}

model VerificationToken {
  identifier String   @id @default(cuid()) @map("_id")
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Book {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  title         String
  genre         String
  description   String
  stock         Int
  author        String
  coverImage    String?
  isbn          String
  timesBorrowed Int        @default(0)
  copies        Int        @default(1)
  BookCopy      BookCopy[]
}

model BorrowedBook {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  book      BookCopy       @relation(fields: [bookId], references: [id])
  user      User           @relation(fields: [userId], references: [id])
  status    BorrowedStatus @default(REQUESTED)
  returned  Boolean        @default(false)
  bookId    String         @db.ObjectId
  userId    String         @db.ObjectId
}

model BookCopy {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  book         Book           @relation(fields: [bookId], references: [id])
  status       BorrowedStatus @default(RETURNED)
  bookId       String         @db.ObjectId
  BorrowedBook BorrowedBook[]
}

enum BorrowedStatus {
  REQUESTED
  BORROWED
  RETURNED
}
